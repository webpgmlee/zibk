package or.kr.kbiz.bo.admin.service.impl;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.URLEncoder;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.stereotype.Service;

import com.oreilly.servlet.MultipartRequest;
import com.oreilly.servlet.multipart.DefaultFileRenamePolicy;

import or.kr.kbiz.bo.admin.domain.ChannelCodeDomain;
import or.kr.kbiz.bo.admin.service.ScriptService;
import or.kr.kbiz.serv.spring.mvc.BaseDao;
/**
 * <pre>스크립트 implement</pre>
 *
 * @author bsy
 * @since 2017.11.20
 * @version 1.0
 *
 */
@Service
public class ScriptServiceImpl implements ScriptService {
	private static final Logger logger = LoggerFactory.getLogger(ScriptServiceImpl.class);

	@Autowired(required=true)
	@Qualifier("apBaseDao")
	private BaseDao baseDao;

	@SuppressWarnings("unchecked")
	public List<ChannelCodeDomain> selectScriptList(ChannelCodeDomain param) {
		param.setTotalcnt((Integer) baseDao.getObject("script.selectScriptTotalCount", param));
		return baseDao.getList("script.select", param);
	}

	@Override
	public ChannelCodeDomain selectScriptDetail(ChannelCodeDomain param) {
		return (ChannelCodeDomain) baseDao.getObject("script.selectDetail", param);
	}
	@Override
	public void sciptUpdate(ChannelCodeDomain param) {
		baseDao.update("script.updateScript", param);

	}

	@SuppressWarnings("unchecked")
	@Override
	public List<ChannelCodeDomain> selectscriptLcodeList(ChannelCodeDomain param) {
		return baseDao.getList("script.selectLcode", param);
	}

	@SuppressWarnings("unchecked")
	@Override
	public List<ChannelCodeDomain> selectscriptMcodeList(ChannelCodeDomain param) {
		return baseDao.getList("script.selectMcode", param);
	}

	public void uploadFile(String hidChnlCode, String hidLcode, String hidMcode, String hidScode, HttpServletRequest request) {
		String scriptNm = hidChnlCode+hidLcode+hidMcode+hidScode;
		//String scriptNm ="";
		int maxPostSize = 10 * 1024 * 1024;
		MultipartRequest multi;
		String fileName = "";
		FileOutputStream out;
		// String serverPath = request.getSession().getServletContext().getRealPath("/");
		String path1 = "D:\\upload\\script\\";
		String path2 = "D:\\upload\\temp\\";
		try {
			File dir = new File(path2);
			if(!dir.exists()){
				dir.mkdirs();
			}

			multi = new MultipartRequest(request, path2, maxPostSize, "utf-8",new DefaultFileRenamePolicy());
			File file = multi.getFile("uploadFile");
			File file2 = new File(path1+(file.getName().replace(".", "_"+scriptNm+".")));
			file.renameTo(file2);
			fileName = file.getName();
			out = new FileOutputStream(file);
			byte[] bytes = fileName.getBytes();
			out.write(bytes);
			out.close();
			file.delete();
			dir.delete();
			ChannelCodeDomain channelCode = new ChannelCodeDomain();
			channelCode.setUploadFile(file2.getName());
			channelCode.setHidChnlCode(hidChnlCode);
			channelCode.setHidLcode(hidLcode);
			channelCode.setHidMcode(hidMcode);
			channelCode.setHidScode(hidScode);
			baseDao.update("script.updateFile", channelCode);
		} catch (IOException e) {
			logger.error("error : "+e);
		}
	}

	public void downloadFile(ChannelCodeDomain channelCodeDomain, HttpServletRequest request, HttpServletResponse response) throws Exception{
		String fileName = channelCodeDomain.getUploadFile();
		String reFileName =  URLEncoder.encode(channelCodeDomain.getUploadFile(),"UTF-8").replaceAll("\\+", "%20");
		File file = new File("D:\\upload\\script\\"+fileName);
		response.setContentLength((int)file.length());
		response.setContentType("application/octet-stream");
		response.setHeader("Content-Description", "JSP Generated Data");
		response.setHeader("Content-Disposition","attachment;filename=\"" +reFileName +"\";");
		response.setHeader("Content-Type", "application/octet-stream; charset=utf-8");
		InputStream in = null;
		OutputStream os = null;
		try{ // 파일을 읽어 스트림에 담기
			in = new FileInputStream(file);
			os = response.getOutputStream();
            byte b[] = new byte[(int)file.length()];
            int leng = 0;
            while( (leng = in.read(b)) > 0 ){
                os.write(b,0,leng);
            }
            in.close();
            os.close();
		}catch(Exception e){
			logger.error("error : "+e);
		}
	}

	public void deleteFile(ChannelCodeDomain channelCodeDomain) {
		String fileName = channelCodeDomain.getUploadFile();
        File file = new File("D:\\upload\\script\\"+fileName);
		if(file.exists()){
			file.delete();
		}
	}
}
