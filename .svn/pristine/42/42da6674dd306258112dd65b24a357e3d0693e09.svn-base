package or.kr.kbiz.bo.admin.controller;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import or.kr.kbiz.bo.admin.domain.ChannelCodeDomain;
import or.kr.kbiz.bo.admin.service.ScriptService;

/**
 * <pre>SciptController</pre>
 *
 * @author bsy
 * @since 2017.11.20
 * @version 1.0
 */

@Controller
@RequestMapping(value="/admin")
public class SciptController {

	private static final Logger logger = LoggerFactory.getLogger(SciptController.class);

	private static String PREFIX = "admin";
	/**
	 * 스크립트 서비스
	 */
	@Autowired
	private ScriptService sciptService;

	/**
	 * <pre>스크립트 화면 호출</pre>
	 *
	 * @param scriptInit 템플릿 도메인
	 * @param model Model 객체
	 * @return String 요청화면 url
	 */
	@RequestMapping(value="/script")
	public String scriptInit(@ModelAttribute ChannelCodeDomain channelCodeDomain, Model model) {
		model.addAttribute("resultList", sciptService.selectScriptList(channelCodeDomain));
		return PREFIX + "/script";
	}

	/**
	 * <pre>스크립트 화면 호출</pre>
	 *
	 * @param sciptList 템플릿 도메인
	 * @param model Model 객체
	 * @return String 요청화면 url
	 */
	@RequestMapping(value="/scriptList")
	public String sciptList(@ModelAttribute ChannelCodeDomain channelCodeDomain, Model model) {
		model.addAttribute("pageDomain", channelCodeDomain);
		model.addAttribute("resultList", sciptService.selectScriptList(channelCodeDomain));
		return PREFIX + "/view/scriptList";
	}

	/**
	 * <pre>스크립트 상세화면 호출</pre>
	 *
	 * @param sciptList 템플릿 도메인
	 * @param model Model 객체
	 * @return String 요청화면 url
	 */
	@RequestMapping(value="/scriptDetail")
	public void sciptDetail(@ModelAttribute ChannelCodeDomain channelCodeDomain, Model model) {
		model.addAttribute("result", sciptService.selectScriptDetail(channelCodeDomain));
	}

	/**
	 * <pre>스크립트 수정 호출</pre>
	 *
	 * @param sciptUpdate 템플릿 도메인
	 * @param model Model 객체
	 * @return String 요청화면 url
	 */
	@RequestMapping(value="/scriptUpdate")
	public void sciptUpdate(@ModelAttribute ChannelCodeDomain channelCodeDomain) {
		 sciptService.sciptUpdate(channelCodeDomain);
	}

	/**
	 * <pre>대분류 조회</pre>
	 *
	 * @param channelLcode 템플릿 도메인
	 * @param model Model 객체
	 * @return String 요청화면 url
	 */
	@RequestMapping(value="/scriptLcode")
	public void channelLcode(@ModelAttribute ChannelCodeDomain channelCodeDomain, Model model) {
		model.addAttribute("result", sciptService.selectscriptLcodeList(channelCodeDomain));
	}

	/**
	 * <pre>중분류 조회</pre>
	 *
	 * @param channelMcode 템플릿 도메인
	 * @param model Model 객체
	 * @return String 요청화면 url
	 */
	@RequestMapping(value="/scriptMcode")
	public void channelMcode(@ModelAttribute ChannelCodeDomain channelCodeDomain, Model model) {
		model.addAttribute("result", sciptService.selectscriptMcodeList(channelCodeDomain));
	}

	/**
	 * <pre>스크립트 파일업로드</pre>
	 *
	 * @param request
	 */
	@RequestMapping(value="/script/uploadFile", method = RequestMethod.POST)
	public String uploadFile(String hidChnlCode, String hidLcode, String hidMcode, String hidScode, HttpServletRequest request) {
		sciptService.uploadFile(hidChnlCode,hidLcode,hidMcode,hidScode,request);
		return PREFIX + "/script";
	}

	/**
	 * <pre>스크립트 파일다운로드</pre>
	 *
	 * @param request
	 */
	@RequestMapping(value="/script/downloadFile")
	public void downloadFile(@ModelAttribute ChannelCodeDomain channelCodeDomain, HttpServletRequest request, HttpServletResponse response) throws Exception{
		sciptService.downloadFile(channelCodeDomain, request, response);
	}

	/**
	 * <pre>스크립트 파일삭제</pre>
	 *
	 * @param deleteFile 템플릿 도메인
	 */
	@RequestMapping(value="/script/deleteFile")
	public String deleteFile(@ModelAttribute ChannelCodeDomain channelCodeDomain) {
		sciptService.deleteFile(channelCodeDomain);
		return PREFIX + "/script";
	}

}
